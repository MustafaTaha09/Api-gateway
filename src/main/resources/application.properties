# ------------------------------------------------------------------------------
# SERVER CONFIGURATION
# ------------------------------------------------------------------------------
# Port the API Gateway will run on
server.port=7070

# ------------------------------------------------------------------------------
# APPLICATION INFO
# ------------------------------------------------------------------------------
# Name for this API Gateway service as it will be registered in Eureka
spring.application.name=api-gateway

# ------------------------------------------------------------------------------
# SPRING CLOUD GATEWAY CONFIGURATION
# ------------------------------------------------------------------------------

# Enable integration with a Discovery Client (like Eureka) for routing.
# This allows using "lb://service-name" URIs.
spring.cloud.gateway.discovery.locator.enabled=true

# Optional: Converts discovered service IDs (from Eureka) to lowercase when creating
# default routes. Useful if your service names in Eureka might have mixed case
# but you prefer lowercase paths for gateway routes.
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# --- Define Routes ---
# Routes are defined as a list. In .properties files, this is done using array-like notation.

# ---- Route to Inventory Service (for /api/v1/inventory/** paths) ----
# Unique ID for this route definition
spring.cloud.gateway.routes[0].id=inventory_service_route

# The target URI. "lb://" means use client-side load balancing via the
# Discovery Client (Eureka) to find instances of "inventory-service".
# "inventory-service" MUST match the spring.application.name of your Inventory Service.
spring.cloud.gateway.routes[0].uri=lb://inventory

# Predicates define conditions for this route to be matched.
# This predicate matches if the request path to the gateway starts with /api/v1/inventory/
# The '**' is a wildcard for any subpath.
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/inventory/**

# Optional Filters for this route (example commented out)
# Filters can modify the request or response.
# Example: StripPrefix=3 would remove the first 3 segments (/api/v1/inventory)
# before forwarding to the inventory-service. This is needed if the inventory-service
# itself doesn't expect that prefix in its own controller mappings.
# If your inventory-service controllers are mapped with @RequestMapping("/api/v1/inventory"),
# then you typically DON'T need to strip the prefix here.
# spring.cloud.gateway.routes[0].filters[0]=StripPrefix=3

# ---- Route to Product endpoints (assuming they are part of Inventory Service, for /api/v1/products/** paths) ----
spring.cloud.gateway.routes[1].id=product_service_route

# Still routes to the "inventory-service" as ProductController is within it.
spring.cloud.gateway.routes[1].uri=lb://inventory

# Matches if the request path to the gateway starts with /api/v1/products/
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/v1/products/**

# Optional Filters (example commented out)
# spring.cloud.gateway.routes[1].filters[0]=StripPrefix=3

# ---- Route to Order Service (for /api/v1/orders/** paths) ----
spring.cloud.gateway.routes[2].id=order_service_route

# Routes to instances of "order-service" discovered via Eureka.
# "order-service" MUST match the spring.application.name of your Order Service.
spring.cloud.gateway.routes[2].uri=lb://order

# Matches if the request path to the gateway starts with /api/v1/orders/
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/v1/orders/**

# Optional Filters (example commented out)
# spring.cloud.gateway.routes[2].filters[0]=StripPrefix=3

# ------------------------------------------------------------------------------
# EUREKA CLIENT CONFIGURATION (for the API Gateway itself)
# ------------------------------------------------------------------------------

# URL of your Eureka Server. The API Gateway registers itself here and also uses
# Eureka to discover backend services like inventory-service and order-service.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# Optional: Register the gateway instance with its IP address rather than hostname.
# Can be useful in certain network configurations or containerized environments.
eureka.instance.prefer-ip-address=true

# ------------------------------------------------------------------------------
# LOGGING CONFIGURATION (for detailed gateway logging during development)
# ------------------------------------------------------------------------------
logging.level.org.springframework.cloud.gateway=TRACE
logging.level.org.springframework.http.server.reactive=DEBUG
logging.level.org.springframework.web.reactive=DEBUG
logging.level.reactor.netty.http.client=DEBUG
# logging.level.org.springframework.boot.autoconfigure.web.reactive.error=TRACE # For error handling details
